export namespace AlgaNews {
    /**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

    export interface paths {
        "/users/{userId}": {
            /** Se a requisição for autenticada para um editor, só poderá ter acesso ao recurso do próprio usuário. <br>Caso a requisição for autenticada para um gerente ou assistente, poderá ter acesso a qualquer recurso de usuário. */
            get: operations["getUserById"];
            /** Apenas requisições autenticadas para gerentes ou assistentes são válidas. <br>Assistentes não podem atualizar informações sensíveis de usuários com perfis de nível de acesso maior que os seus. */
            put: operations["updateUser"];
            parameters: {
                path: {
                    userId: number;
                };
            };
        };
        "/users": {
            /** Apenas requisições autenticadas para gerentes ou assistentes são válidas. */
            get: operations["getUsers"];
            /** Apenas requisições autenticadas para gerentes ou assistentes são válidas. <br>Assistentes não podem criar usuários com perfis de nível de acesso maior que os seus. */
            post: operations["createUser"];
        };
        "/users/{userId}/activation": {
            /** Apenas requisições autenticadas para gerentes ou assistentes são válidas. <br>Assistentes não podem ativar usuários com perfis de nível de acesso maior que os seus. */
            put: operations["activateUser"];
            /** Apenas requisições autenticadas para gerentes ou assistentes são válidas. <br>Assistentes não podem desativar usuários com perfis de nível de acesso maior que os seus. */
            delete: operations["deactivateUser"];
            parameters: {
                path: {
                    userId: number;
                };
            };
        };
        "/users/editors/{editorId}": {
            get: operations["getEditorById"];
            parameters: {
                path: {
                    editorId: number;
                };
            };
        };
        "/users/editors": {
            get: operations["getEditors"];
        };
        "/posts": {
            get: operations["getPosts"];
            post: operations["createPost"];
        };
        "/posts/{postId}": {
            get: operations["getPostById"];
            put: operations["updatePost"];
            delete: operations["deletePost"];
            parameters: {
                path: {
                    postId: number;
                };
            };
        };
        "/posts/{postId}/publishing": {
            put: operations["publishPost"];
            delete: operations["unpublishPost"];
            parameters: {
                path: {
                    postId: number;
                };
            };
        };
        "/payments": {
            get: operations["getPayments"];
            post: operations["createPayment"];
        };
        "/payments/bulk-approvals": {
            put: operations["approveBulkPayments"];
        };
        "/payments/previews": {
            /** Uma simulação de pagamento não é persistida no sistema */
            post: operations["createPaymentPreview"];
        };
        "/payments/{paymentId}/approval": {
            put: operations["approvePayment"];
            parameters: {
                path: {
                    /** ID do pagamento */
                    paymentId: number;
                };
            };
        };
        "/payments/{paymentId}": {
            get: operations["getPayment"];
            /** Exclui fisicamente um pagamento. Caso o pagamento já tenha sido aprovado, não será possível excluí-lo. */
            delete: operations["deletePayment"];
            parameters: {
                path: {
                    /** ID do pagamento */
                    paymentId: number;
                };
            };
        };
        "/payments/{paymentId}/posts": {
            get: operations["getPostsByPayment"];
            parameters: {
                path: {
                    paymentId: number;
                };
                query: {
                    /** Nome da propriedade para ordenação */
                    sort?: components["parameters"]["pageSort"];
                };
            };
        };
        "/cashflow/entries/{entryId}": {
            get: operations["getCashFlowEntry"];
            /** Não é permitido atualizar um lançamento financeiro gerado pelo sistema. */
            put: operations["updateCashFlowEntry"];
            /** Exclui fisicamente um lançamento financeiro. Caso o lançamento informado tenha sido gerado pelo sistema, não será possível excluí-lo. */
            delete: operations["deleteCashFlowEntry"];
            parameters: {
                path: {
                    /** ID do lançamento financeiro */
                    entryId: number;
                };
            };
        };
        "/cashflow/entries": {
            get: operations["getCashFlowEntries"];
            post: operations["createCashFlowEntry"];
        };
        "/cashflow/entries/bulk-removals": {
            put: operations["deleteBulkCashFlowEntries"];
        };
        "/cashflow/categories/{categoryId}": {
            get: operations["getCashFlowCategory"];
            put: operations["updateCashFlowCategory"];
            /** Exclui fisicamente uma categoria. Caso a categoria possua lançamentos vinculados, não será possível excluí-la. */
            delete: operations["deleteCashFlowCategory"];
            parameters: {
                path: {
                    /** ID da categoria */
                    categoryId: number;
                };
            };
        };
        "/cashflow/categories": {
            get: operations["getCashFlowCategories"];
            post: operations["createCashFlowCategory"];
        };
        "/metrics/monthly-revenues-expenses": {
            get: {
                parameters: {
                    query: {
                        /** Ano para filtro da consulta */
                        yearMonth: string;
                    };
                };
                responses: {
                    /** OK */
                    200: {
                        content: {
                            "application/json": components["schemas"]["MonthlyRevenuesExpenses"];
                            "application/vnd.alganews.chartjs+json": components["schemas"]["MonthlyRevenuesExpensesChartjs"];
                        };
                    };
                };
            };
        };
        "/metrics/editor/monthly-earnings": {
            get: {
                parameters: {
                    query: {
                        /** Ano para filtro da consulta */
                        yearMonth: string;
                    };
                };
                responses: {
                    /** OK */
                    200: {
                        content: {
                            "application/json": components["schemas"]["EditorMonthlyEarnings"];
                        };
                    };
                };
            };
        };
        "/metrics/editor/top3-tags": {
            get: {
                responses: {
                    /** OK */
                    200: {
                        content: {
                            "application/json": components["schemas"]["EditorTagRatio"];
                        };
                    };
                };
            };
        };
        "/upload-requests": {
            post: operations["createUploadRequest"];
        };
    }

    export interface components {
        schemas: {
            /** @description Usuário muito resumido (mínimo) possui apenas id, nome e avatar. */
            UserMinimal: {
                /**
                 * Format: int64
                 * @example 29
                 */
                id: number;
                /** @example Daniel Bonifacio */
                name: string;
                avatarUrls: components["schemas"]["ImageUrls"];
            };
            /** @description Usuário resumido possui apenas os principais dados. */
            UserSummary: {
                /**
                 * Format: int64
                 * @example 29
                 */
                id: number;
                /** @example Daniel Bonifacio */
                name: string;
                /**
                 * Format: email
                 * @example daniel.bonifacio@algaworks.com
                 */
                email: string;
                avatarUrls: components["schemas"]["ImageUrls"];
                role: components["schemas"]["Role"];
                /** @example true */
                active: boolean;
                /**
                 * Format: date-time
                 * @example 2017-03-04T00:12:45Z
                 */
                createdAt: string;
                /**
                 * @description Se o usuário autenticado pode ou não ativar este usuário
                 * @example true
                 */
                canBeActivated: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não desativar este usuário
                 * @example true
                 */
                canBeDeactivated: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não alterar dados sensíveis deste usuário
                 * @example true
                 */
                canSensitiveDataBeUpdated: boolean;
            };
            /** @description Usuário detalhado contém todos os dados. */
            UserDetailed: {
                /**
                 * Format: int64
                 * @example 29
                 */
                id: number;
                /** @example Daniel Bonifacio */
                name: string;
                /**
                 * Format: email
                 * @example daniel.bonifacio@algaworks.com
                 */
                email: string;
                avatarUrls: components["schemas"]["ImageUrls"];
                /** @example Gosta de JavaScript. */
                bio: string;
                role: components["schemas"]["Role"];
                /**
                 * Format: date
                 * @example 1999-04-01
                 */
                birthdate: string;
                /** @example 5527977778888 */
                phone: string;
                /**
                 * Format: cpf
                 * @example 03388492288
                 */
                taxpayerId: string;
                /**
                 * Format: double
                 * @example 0.06
                 */
                pricePerWord: number;
                /** @example true */
                active: boolean;
                /**
                 * Format: date-time
                 * @example 2020-12-01T18:09:02Z
                 */
                createdAt: string;
                bankAccount: components["schemas"]["BankAccount"];
                location: components["schemas"]["Location"];
                skills: components["schemas"]["Skill"][] | null;
                metrics: components["schemas"]["UserMetrics"];
                /**
                 * Format: date-time
                 * @example 2020-12-01T18:09:02Z
                 */
                updatedAt: string;
                updatedBy: components["schemas"]["UserMinimal"];
                createdBy: components["schemas"]["UserMinimal"];
                /**
                 * @description Se o usuário autenticado pode ou não ativar este usuário
                 * @example true
                 */
                canBeActivated: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não desativar este usuário
                 * @example true
                 */
                canBeDeactivated: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não alterar dados sensíveis deste usuário
                 * @example true
                 */
                canSensitiveDataBeUpdated: boolean;
            };
            UserInput: {
                /** @example Daniel Bonifacio */
                name: string;
                /**
                 * Format: email
                 * @example daniel.bonifacio@algaworks.com
                 */
                email: string;
                /** @example http://localhost:4566/6832112f-e994-4f75-8ca0-aa88734241ff.png */
                avatarUrl?: string;
                /** @example Gosta de JavaScript. */
                bio: string;
                /**
                 * Format: cpf
                 * @example 03388492288
                 */
                taxpayerId: string;
                /** @example 5527999991111 */
                phone: string;
                /**
                 * Format: double
                 * @example 0.06
                 */
                pricePerWord?: number;
                role: components["schemas"]["Role"];
                /**
                 * Format: date
                 * @example 1999-04-01
                 */
                birthdate: string;
                bankAccount: components["schemas"]["BankAccount"];
                location: components["schemas"]["Location"];
                skills?: components["schemas"]["Skill"][] | null;
            } & {
                metadata: unknown;
            };
            UserIdInput: {
                /**
                 * Format: int64
                 * @example 28
                 */
                id: number;
            };
            UserMetrics: {
                /**
                 * Format: float
                 * @example 1547.34
                 */
                weeklyEarnings: number;
                /**
                 * Format: float
                 * @example 9547.24
                 */
                monthlyEarnings: number;
                /**
                 * Format: float
                 * @example 49547.24
                 */
                lifetimeEarnings: number;
                /**
                 * Format: int32
                 * @example 3293
                 */
                weeklyWords: number;
                /**
                 * Format: int32
                 * @example 14587
                 */
                monthlyWords: number;
                /**
                 * Format: int32
                 * @example 758659
                 */
                lifetimeWords: number;
            };
            /** @description Editor (usuário) resumido possui apenas os principais dados. */
            EditorSummary: {
                /**
                 * Format: int64
                 * @example 29
                 */
                id: number;
                /** @example Daniel Bonifacio */
                name: string;
                avatarUrls: components["schemas"]["ImageUrls"];
                /**
                 * Format: date-time
                 * @example 2017-03-04T00:12:45Z
                 */
                createdAt: string;
            };
            /** @description Editor (usuário) detalhado contém todos os dados. */
            EditorDetailed: {
                /**
                 * Format: int64
                 * @example 29
                 */
                id: number;
                /** @example Daniel Bonifacio */
                name: string;
                avatarUrls: components["schemas"]["ImageUrls"];
                /** @example Gosta de JavaScript. */
                bio: string;
                /**
                 * Format: date-time
                 * @example 2020-12-01T18:09:02Z
                 */
                createdAt: string;
                location: components["schemas"]["Location"];
                skills: components["schemas"]["Skill"][] | null;
            };
            PostSummary: {
                /**
                 * Format: int64
                 * @example 42
                 */
                id: number;
                /** @example como-fazer-x-coisas-com-react-js */
                slug: string;
                /** @example Como fazer X coisas com React.js */
                title: string;
                imageUrls: components["schemas"]["ImageUrls"];
                editor: components["schemas"]["EditorSummary"];
                /**
                 * Format: date-time
                 * @example 2020-12-01T18:09:02Z
                 */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
                /** @example true */
                published: boolean;
                tags: string[];
                /**
                 * @description Se o usuário autenticado pode ou não publicar o post
                 * @example true
                 */
                canBePublished: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não despublicar o post
                 * @example true
                 */
                canBeUnpublished: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não remover o post
                 * @example true
                 */
                canBeDeleted: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não editar o post
                 * @example true
                 */
                canBeEdited: boolean;
            };
            PostDetailed: {
                /**
                 * Format: int64
                 * @example 45
                 */
                id: number;
                editor: components["schemas"]["EditorSummary"];
                /** @example como-fazer-x-coisas-com-react-js */
                slug: string;
                /** @example Como fazer X coisas com React.js */
                title: string;
                imageUrls: components["schemas"]["ImageUrls"];
                /**
                 * @description Corpo do post em formato Markdown
                 * @example Olá, hoje eu vou **mostrar** a como fazer X coisas com `react.js`
                 */
                body: string;
                tags: string[];
                /**
                 * Format: date-time
                 * @example 2020-12-01T18:09:02Z
                 */
                createdAt: string;
                earnings?: components["schemas"]["PostEarnings"];
                /** @example true */
                published: boolean;
                /**
                 * Format: date-time
                 * @example 2020-12-01T18:09:02Z
                 */
                updatedAt: string;
                updatedBy: components["schemas"]["UserMinimal"];
                /**
                 * @description Se o usuário autenticado pode ou não publicar o post
                 * @example true
                 */
                canBePublished: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não despublicar o post
                 * @example true
                 */
                canBeUnpublished: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não remover o post
                 * @example true
                 */
                canBeDeleted: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não editar o post
                 * @example true
                 */
                canBeEdited: boolean;
            };
            PostWithEarnings: {
                /**
                 * Format: int64
                 * @example 45
                 */
                id: number;
                /** @example Como fazer X coisas com React.js */
                title: string;
                imageUrls: components["schemas"]["ImageUrls"];
                /**
                 * Format: date-time
                 * @example 2020-12-01T18:09:02Z
                 */
                createdAt: string;
                earnings: components["schemas"]["PostEarnings"];
                /** @example true */
                published: boolean;
            };
            PostInput: {
                /** @example Como fazer X coisas com React.js */
                title: string;
                /** @example como-fazer-x-coisas-com-react-js-cover.png */
                imageUrl: string;
                /**
                 * @description Este campo retornará uma string marcada utilizando markdown
                 * @example Olá, hoje eu vou **mostrar** a como fazer X coisas com `react.js`
                 */
                body: string;
                tags: string[];
            };
            PostsPaginated: components["schemas"]["Page"] & {
                content?: components["schemas"]["PostSummary"][];
            };
            PaymentInput: {
                payee: components["schemas"]["UserIdInput"];
                accountingPeriod: components["schemas"]["Period"];
                bonuses?: components["schemas"]["Bonus"][];
                /**
                 * Format: date
                 * @example 2020-12-02
                 */
                scheduledTo: string;
            };
            PaymentPreviewInput: {
                payee: components["schemas"]["UserIdInput"];
                accountingPeriod: components["schemas"]["Period"];
                bonuses?: components["schemas"]["Bonus"][];
            };
            PaymentPreview: {
                accountingPeriod: components["schemas"]["Period"];
                payee: components["schemas"]["UserMinimal"];
                earnings: components["schemas"]["PaymentEarnings"];
                bonuses: components["schemas"]["Bonus"][];
                /** @example 1645.74 */
                grandTotalAmount: number;
                bankAccount: components["schemas"]["BankAccount"];
            };
            PaymentDetailed: {
                /**
                 * Format: int64
                 * @example 332
                 */
                id: number;
                accountingPeriod: components["schemas"]["Period"];
                payee: components["schemas"]["UserMinimal"];
                earnings: components["schemas"]["PaymentEarnings"];
                bonuses: components["schemas"]["Bonus"][];
                /** @example 1645.74 */
                grandTotalAmount: number;
                bankAccount: components["schemas"]["BankAccount"];
                createdBy: components["schemas"]["UserMinimal"];
                approvedBy: components["schemas"]["UserMinimal"];
                /**
                 * Format: date-time
                 * @example 2017-03-04T00:12:45-03:00
                 */
                createdAt: string;
                /**
                 * Format: date
                 * @example 2020-12-02
                 */
                scheduledTo: string;
                /**
                 * Format: date-time
                 * @example 2021-08-30T16:43:53Z
                 */
                approvedAt: string;
                /**
                 * Format: date-time
                 * @example 2021-08-30T16:43:53Z
                 */
                updatedAt: string;
                updatedBy: components["schemas"]["UserMinimal"];
                /**
                 * @description Se o usuário autenticado pode ou não aprovar o pagamento
                 * @example true
                 */
                canBeApproved: boolean;
                /** @description Se o usuário autenticado pode ou não remover o pagamento */
                canBeDeleted: boolean;
            };
            PaymentSummary: {
                /**
                 * Format: int64
                 * @example 332
                 */
                id: number;
                /** @example 1938.33 */
                grandTotalAmount: number;
                accountingPeriod: components["schemas"]["Period"];
                payee: components["schemas"]["UserMinimal"];
                /**
                 * Format: date-time
                 * @example 2021-08-30T16:43:53Z
                 */
                approvedAt: string;
                /**
                 * Format: date
                 * @example 2020-12-02
                 */
                scheduledTo: string;
                /**
                 * @description Se o usuário autenticado pode ou não aprovar o pagamento
                 * @example true
                 */
                canBeApproved: boolean;
                /**
                 * @description Se o usuário autenticado pode ou não remover o pagamento
                 * @example true
                 */
                canBeDeleted: boolean;
            };
            PaymentsPaginated: components["schemas"]["Page"] & {
                content?: components["schemas"]["PaymentSummary"][];
            };
            CashFlowCategoryDetailed: {
                /**
                 * Format: int64
                 * @example 2
                 */
                id: number;
                /** @example Anúncios */
                name: string;
                /**
                 * Format: date-time
                 * @example 2021-08-30T16:43:53Z
                 */
                updatedAt: string;
                updatedBy: components["schemas"]["UserMinimal"];
                type: components["schemas"]["CashFlowEntryType"];
                /**
                 * Format: date-time
                 * @example 2021-08-30T16:43:53Z
                 */
                createdAt: string;
                createdBy: components["schemas"]["UserMinimal"];
                /**
                 * Format: int64
                 * @example 200
                 */
                totalEntries: number;
                canBeDeleted: boolean;
            };
            CashFlowCategorySummary: {
                /**
                 * Format: int64
                 * @example 2
                 */
                id: number;
                /** @example Anúncios */
                name: string;
                type: components["schemas"]["CashFlowEntryType"];
                /**
                 * Format: int64
                 * @example 200
                 */
                totalEntries: number;
                canBeDeleted: boolean;
            };
            CashFlowCategoryMinimal: {
                /**
                 * Format: int64
                 * @example 2
                 */
                id: number;
                /** @example Anúncios */
                name: string;
                type: components["schemas"]["CashFlowEntryType"];
            };
            CashFlowCategoryInput: {
                /** @example Anúncios */
                name: string;
                type: components["schemas"]["CashFlowEntryType"];
            };
            CashFlowCategoryIdInput: {
                /**
                 * Format: int64
                 * @example 23
                 */
                id: number;
            };
            /**
             * @example REVENUE
             * @enum {string}
             */
            CashFlowEntryType: "REVENUE" | "EXPENSE";
            CashFlowEntrySummary: {
                /**
                 * Format: int64
                 * @example 332
                 */
                id: number;
                type: components["schemas"]["CashFlowEntryType"];
                /**
                 * Format: date
                 * @example 2020-12-01
                 */
                transactedOn: string;
                /** @example 3700 */
                amount: number;
                category: components["schemas"]["CashFlowCategoryMinimal"];
                /** @example Anúncio em postagem - Ipiranga */
                description: string;
                systemGenerated: boolean;
                canBeDeleted: boolean;
                canBeEdited: boolean;
            };
            CashFlowEntryDetailed: {
                /**
                 * Format: int64
                 * @example 332
                 */
                id: number;
                type: components["schemas"]["CashFlowEntryType"];
                /**
                 * Format: date
                 * @example 2020-12-01
                 */
                transactedOn: string;
                /** @example 3700 */
                amount: number;
                category: components["schemas"]["CashFlowCategoryMinimal"];
                /** @example Anúncio em postagem - Ipiranga */
                description: string;
                systemGenerated: boolean;
                createdBy: components["schemas"]["UserMinimal"];
                /**
                 * Format: date-time
                 * @example 2021-08-30T16:43:53Z
                 */
                createdAt: string;
                /**
                 * Format: date-time
                 * @example 2021-08-30T16:43:53Z
                 */
                updatedAt: string;
                updatedBy: components["schemas"]["UserMinimal"];
                canBeDeleted: boolean;
                canBeEdited: boolean;
            };
            CashFlowEntryInput: {
                type: components["schemas"]["CashFlowEntryType"];
                /**
                 * Format: date
                 * @example 2020-12-01
                 */
                transactedOn: string;
                /**
                 * Format: double
                 * @example 3700
                 */
                amount: number;
                category: components["schemas"]["CashFlowCategoryIdInput"];
                /** @example Anúncio em postagem - Ipiranga */
                description: string;
            };
            /** @example [object Object] */
            MonthlyRevenuesExpensesChartjs: {
                datasets: {
                    /**
                     * @example Receita
                     * @enum {string}
                     */
                    label: "Receita" | "Despesa";
                    /** @example 254587,325478,451758,325875,521745,452140,354751,658430 */
                    data: number[];
                }[];
                /** @example Janeiro de 2021,Fevereiro de 2021,Março de 2021,Abril de 2021,Maio de 2021,Junho de 2021,Julho de 2021,Agosto de 2021 */
                labels?: string[];
            };
            MonthlyRevenuesExpenses: {
                /**
                 * Format: yyyy-mm
                 * @example 2020-01
                 */
                yearMonth: string;
                /** @example 3243.23 */
                totalRevenues: number;
                /** @example 2445.94 */
                totalExpenses: number;
            }[];
            EditorMonthlyEarnings: {
                /**
                 * Format: yyyy-mm
                 * @example 2020-01
                 */
                yearMonth: string;
                /** @example 3243.23 */
                totalAmount: number;
                /** @example 2445.94 */
                totalPlatformAverageAmount: number;
            }[];
            EditorTagRatio: {
                /** @example Javascript */
                tagName: string;
                /** @example 50.2 */
                percentage: number;
            }[];
            ImageUrls: {
                /**
                 * Format: uri
                 * @example https://storage.googleapis.com/alganews-files/posts/avatar-joao.jpeg
                 */
                default: string;
                /**
                 * Format: uri
                 * @example https://storage.googleapis.com/alganews-files/posts/avatar-joao-small.jpeg
                 */
                small: string;
                /**
                 * Format: uri
                 * @example https://storage.googleapis.com/alganews-files/posts/avatar-joao-medium.jpeg
                 */
                medium: string;
                /**
                 * Format: uri
                 * @example https://storage.googleapis.com/alganews-files/posts/avatar-joao-large.jpeg
                 */
                large: string;
            };
            Bonus: {
                /** @example 1kk views em 1 dia */
                title: string;
                /**
                 * Format: double
                 * @example 1500
                 */
                amount: number;
            };
            Location: {
                /** @example Brasil */
                country: string;
                /** @example Espírito Santo */
                state: string;
                /** @example Vila Velha */
                city: string;
            };
            Skill: {
                /** @example JavaScript */
                name: string;
                /** @example 95 */
                percentage: number;
            };
            BankAccount: {
                /** @example 001 */
                bankCode: string;
                /** @example 0001 */
                agency: string;
                /** @example 254856 */
                number: string;
                /** @example 5 */
                digit: string;
                /**
                 * @description Tipos de contas:
                 *  * `SAVING` - Conta poupança
                 *  * `CHECKING` - Conta corrente
                 *
                 * @enum {string}
                 */
                type: "SAVING" | "CHECKING";
            };
            /**
             * @description Tipos de perfis:
             *   * `EDITOR` - Editor de conteúdo
             *   * `ASSISTANT` - Auxiliar de recursos humanos e administração
             *   * `MANAGER` - Gerente da plataforma
             *
             * @example EDITOR
             * @enum {string}
             */
            Role: "EDITOR" | "ASSISTANT" | "MANAGER";
            PostEarnings: {
                /**
                 * Format: double
                 * @example 0.06
                 */
                pricePerWord: number;
                /** @example 2429 */
                words: number;
                /** @example 145.74 */
                totalAmount: number;
            };
            PaymentEarnings: {
                /** @example 2429 */
                words: number;
                /** @example 145.74 */
                totalAmount: number;
            };
            Period: {
                /**
                 * Format: date
                 * @example 2020-11-01
                 */
                startsOn: string;
                /**
                 * Format: date
                 * @example 2020-11-30
                 */
                endsOn: string;
            };
            UploadRequestInput: {
                /** @example 6832112f-e994-4f75-8ca0-aa88734241ff.png */
                fileName: string;
                /** @example 1000000 */
                contentLength: number;
            };
            UploadRequest: {
                /**
                 * Format: uri
                 * @example https://storage.googleapis.com/alganews-tmp/tmp/foto.png?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=834856092418-compute%40developer.gserviceaccount.com%2F20210301%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20210301T155344Z&X-Goog-Expires=900&X-Goog-SignedHeaders=content-length%3Bcontent-type%3Bhost&X-Goog-Signature=0864c1ce28319c7b4cb830bb5d57be86d6292bb073fe7f4b2882b7754d6657f8c9b7cae69fb0bc0010e634d4e8ea65e092839a18971513495512044aefbb61437e09714626f59444acbce1e222f0f7a1a7b2d375c40036599d4ae28ee5fa881f1e72603007f560cbcf11295b8522fdb217a7564333e6623f8d23406f1446cbd0db5587fc0a9da8f00c23b18eeaa31bd24204f1d051d735a4b6f819f8d703eabffab8ce6f6676c31cd884fd6f3a530b4aef2f2cc8c7c74fde56fae049d203f6b318fbdd94fe326a11e0152fcce2a016eea9e7cef15720f8333320aed719fa8277c56a5c1ae79f7e2e483da39acf14e5775938263341c3c4e8df6148ccbd0fd474
                 */
                uploadSignedUrl: string;
            };
            Page: {
                /**
                 * Format: int32
                 * @example 2
                 */
                page: number;
                /**
                 * Format: int32
                 * @example 9
                 */
                size: number;
                /**
                 * Format: int32
                 * @example 15
                 */
                totalPages: number;
                /**
                 * Format: int32
                 * @example 442
                 */
                totalElements: number;
            } & {
                content: unknown;
            };
            /** ProblemObject */
            ProblemObject: {
                /** @example amount */
                name?: string;
                /** @example O valor é obrigatório */
                userMessage: string;
            } & {
                type: unknown;
            };
            /**
             * Problem
             * @description Representa um problema na comunicação com a API. Este modelo de representação é baseado na RFC 7807 (Problem Details for HTTP APIs)
             */
            Problem: {
                /**
                 * Format: int32
                 * @example 400
                 */
                status: number;
                /**
                 * Format: date-time
                 * @example 2020-12-01T18:09:02Z
                 */
                timestamp: string;
                /** @example https://alganews.com.br/dados-invalidos */
                type: string;
                /** @example Dados inválidos */
                title: string;
                /** @example Um ou mais campos estão inválidos. Faça o preenchimento correto e tente novamente. */
                detail: string;
                /** @description Lista de objetos ou campos que geraram o erro (opcional) */
                objects?: components["schemas"]["ProblemObject"][];
                userMessage?: string;
            };
        };
        responses: {
            /** Recurso não encontrado */
            NotFound: {
                content: {
                    "application/json": components["schemas"]["Problem"];
                };
            };
            /** Requisição inválida */
            BadRequest: {
                content: {
                    "application/json": components["schemas"]["Problem"];
                };
            };
        };
        parameters: {
            /** @description Número da página para a consulta */
            pageNumber: number;
            /** @description Quantidade de itens por página */
            pageSize: number;
            /** @description Nome da propriedade para ordenação */
            pageSort: string[];
        };
    }

    export interface operations {
        /** Se a requisição for autenticada para um editor, só poderá ter acesso ao recurso do próprio usuário. <br>Caso a requisição for autenticada para um gerente ou assistente, poderá ter acesso a qualquer recurso de usuário. */
        getUserById: {
            parameters: {
                path: {
                    userId: number;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["UserDetailed"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        /** Apenas requisições autenticadas para gerentes ou assistentes são válidas. <br>Assistentes não podem atualizar informações sensíveis de usuários com perfis de nível de acesso maior que os seus. */
        updateUser: {
            parameters: {
                path: {
                    userId: number;
                };
            };
            responses: {
                /** Usuário atualizado */
                200: {
                    content: {
                        "application/json": components["schemas"]["UserDetailed"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserInput"];
                };
            };
        };
        /** Apenas requisições autenticadas para gerentes ou assistentes são válidas. */
        getUsers: {
            parameters: {
                query: {
                    /** Termo para consulta nas propriedades de nome, e-mail e CPF */
                    term?: string;
                    /** Nome do usuário */
                    name?: string;
                    /** E-mail do usuário */
                    email?: string;
                    /** Nome da propriedade para ordenação */
                    sort?: components["parameters"]["pageSort"];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["UserSummary"][];
                    };
                };
            };
        };
        /** Apenas requisições autenticadas para gerentes ou assistentes são válidas. <br>Assistentes não podem criar usuários com perfis de nível de acesso maior que os seus. */
        createUser: {
            responses: {
                /** Usuário criado */
                201: {
                    content: {
                        "application/json": components["schemas"]["UserDetailed"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserInput"];
                };
            };
        };
        /** Apenas requisições autenticadas para gerentes ou assistentes são válidas. <br>Assistentes não podem ativar usuários com perfis de nível de acesso maior que os seus. */
        activateUser: {
            parameters: {
                path: {
                    userId: number;
                };
            };
            responses: {
                /** Usuário ativado */
                204: never;
                404: components["responses"]["NotFound"];
            };
        };
        /** Apenas requisições autenticadas para gerentes ou assistentes são válidas. <br>Assistentes não podem desativar usuários com perfis de nível de acesso maior que os seus. */
        deactivateUser: {
            parameters: {
                path: {
                    userId: number;
                };
            };
            responses: {
                /** Usuário desativado */
                204: never;
                404: components["responses"]["NotFound"];
            };
        };
        getEditorById: {
            parameters: {
                path: {
                    editorId: number;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["EditorDetailed"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        getEditors: {
            parameters: {
                query: {
                    /** Nome da propriedade para ordenação */
                    sort?: components["parameters"]["pageSort"];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["EditorSummary"][];
                    };
                };
            };
        };
        getPosts: {
            parameters: {
                query: {
                    /** ID do editor (usuário) do post */
                    editorId?: number;
                    /** Número da página para a consulta */
                    page?: components["parameters"]["pageNumber"];
                    /** Quantidade de itens por página */
                    size?: components["parameters"]["pageSize"];
                    /** Nome da propriedade para ordenação */
                    sort?: components["parameters"]["pageSort"];
                    /** Inclui todos os posts no resultado da consulta (incluindo os despublicados) */
                    showAll?: boolean;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["PostsPaginated"];
                    };
                };
            };
        };
        createPost: {
            responses: {
                /** Post criado */
                201: {
                    content: {
                        "application/json": components["schemas"]["PostDetailed"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PostInput"];
                };
            };
        };
        getPostById: {
            parameters: {
                path: {
                    postId: number;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["PostDetailed"];
                    };
                };
            };
        };
        updatePost: {
            parameters: {
                path: {
                    postId: number;
                };
            };
            responses: {
                /** Post alterado */
                200: {
                    content: {
                        "application/json": components["schemas"]["PostDetailed"];
                    };
                };
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PostInput"];
                };
            };
        };
        deletePost: {
            parameters: {
                path: {
                    postId: number;
                };
            };
            responses: {
                /** Post excluído */
                204: never;
                404: components["responses"]["NotFound"];
            };
        };
        publishPost: {
            parameters: {
                path: {
                    postId: number;
                };
            };
            responses: {
                /** Post publicado */
                204: never;
                404: components["responses"]["NotFound"];
            };
        };
        unpublishPost: {
            parameters: {
                path: {
                    postId: number;
                };
            };
            responses: {
                /** Post despublicado */
                204: never;
                404: components["responses"]["NotFound"];
            };
        };
        getPayments: {
            parameters: {
                query: {
                    /** ID do beneficiário (usuário) do pagamento */
                    payeeId?: number;
                    /** E-mail do beneficiário (usuário) do pagamento */
                    payeeEmail?: string;
                    /** Mês/ano do agendamento */
                    scheduledToYearMonth?: string;
                    /** Número da página para a consulta */
                    page?: components["parameters"]["pageNumber"];
                    /** Quantidade de itens por página */
                    size?: components["parameters"]["pageSize"];
                    /** Nome da propriedade para ordenação */
                    sort?: components["parameters"]["pageSort"];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["PaymentsPaginated"];
                    };
                };
            };
        };
        createPayment: {
            responses: {
                /** Pagamento criado */
                201: {
                    content: {
                        "application/json": components["schemas"]["PaymentDetailed"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentInput"];
                };
            };
        };
        approveBulkPayments: {
            responses: {
                /** Pagamentos aprovados */
                204: never;
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": number[];
                };
            };
        };
        /** Uma simulação de pagamento não é persistida no sistema */
        createPaymentPreview: {
            responses: {
                /** Simulação de pagamento criada */
                201: {
                    content: {
                        "application/json": components["schemas"]["PaymentPreview"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentPreviewInput"];
                };
            };
        };
        approvePayment: {
            parameters: {
                path: {
                    /** ID do pagamento */
                    paymentId: number;
                };
            };
            responses: {
                /** Pagamento aprovado */
                204: never;
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
            };
        };
        getPayment: {
            parameters: {
                path: {
                    /** ID do pagamento */
                    paymentId: number;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["PaymentDetailed"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        /** Exclui fisicamente um pagamento. Caso o pagamento já tenha sido aprovado, não será possível excluí-lo. */
        deletePayment: {
            parameters: {
                path: {
                    /** ID do pagamento */
                    paymentId: number;
                };
            };
            responses: {
                /** Pagamento excluído */
                204: never;
                404: components["responses"]["NotFound"];
            };
        };
        getPostsByPayment: {
            parameters: {
                path: {
                    paymentId: number;
                };
                query: {
                    /** Nome da propriedade para ordenação */
                    sort?: components["parameters"]["pageSort"];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["PostWithEarnings"][];
                    };
                };
            };
        };
        getCashFlowEntry: {
            parameters: {
                path: {
                    /** ID do lançamento financeiro */
                    entryId: number;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["CashFlowEntryDetailed"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        /** Não é permitido atualizar um lançamento financeiro gerado pelo sistema. */
        updateCashFlowEntry: {
            parameters: {
                path: {
                    /** ID do lançamento financeiro */
                    entryId: number;
                };
            };
            responses: {
                /** Lançamento financeiro atualizado */
                200: {
                    content: {
                        "application/json": components["schemas"]["CashFlowEntryDetailed"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CashFlowEntryInput"];
                };
            };
        };
        /** Exclui fisicamente um lançamento financeiro. Caso o lançamento informado tenha sido gerado pelo sistema, não será possível excluí-lo. */
        deleteCashFlowEntry: {
            parameters: {
                path: {
                    /** ID do lançamento financeiro */
                    entryId: number;
                };
            };
            responses: {
                /** Lançamento financeiro excluído */
                204: never;
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
            };
        };
        getCashFlowEntries: {
            parameters: {
                query: {
                    /** Tipo do lançamento financeiro */
                    type: components["schemas"]["CashFlowEntryType"];
                    /** Mês/ano dos lançamentos financeiros */
                    yearMonth: string;
                    /** Nome da propriedade para ordenação */
                    sort?: components["parameters"]["pageSort"];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["CashFlowEntrySummary"][];
                    };
                };
            };
        };
        createCashFlowEntry: {
            responses: {
                /** Lançamento financeiro criado */
                201: {
                    content: {
                        "application/json": components["schemas"]["CashFlowEntryDetailed"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CashFlowEntryInput"];
                };
            };
        };
        deleteBulkCashFlowEntries: {
            responses: {
                /** Lançamentos financeiros excluídos */
                204: never;
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": number[];
                };
            };
        };
        getCashFlowCategory: {
            parameters: {
                path: {
                    /** ID da categoria */
                    categoryId: number;
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["CashFlowCategoryDetailed"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        updateCashFlowCategory: {
            parameters: {
                path: {
                    /** ID da categoria */
                    categoryId: number;
                };
            };
            responses: {
                /** Categoria atualizada */
                200: {
                    content: {
                        "application/json": components["schemas"]["CashFlowCategoryDetailed"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CashFlowCategoryInput"];
                };
            };
        };
        /** Exclui fisicamente uma categoria. Caso a categoria possua lançamentos vinculados, não será possível excluí-la. */
        deleteCashFlowCategory: {
            parameters: {
                path: {
                    /** ID da categoria */
                    categoryId: number;
                };
            };
            responses: {
                /** Categoria excluída */
                204: never;
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
            };
        };
        getCashFlowCategories: {
            parameters: {
                query: {
                    /** Nome da propriedade para ordenação */
                    sort?: components["parameters"]["pageSort"];
                };
            };
            responses: {
                /** OK */
                200: {
                    content: {
                        "application/json": components["schemas"]["CashFlowCategorySummary"][];
                    };
                };
            };
        };
        createCashFlowCategory: {
            responses: {
                /** Categoria criada */
                201: {
                    content: {
                        "application/json": components["schemas"]["CashFlowCategoryDetailed"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CashFlowCategoryInput"];
                };
            };
        };
        createUploadRequest: {
            responses: {
                /** Solicitação de upload de arquivo criada */
                200: {
                    content: {
                        "application/json": components["schemas"]["UploadRequest"];
                    };
                };
                400: components["responses"]["BadRequest"];
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UploadRequestInput"];
                };
            };
        };
    }

    export interface external { }

}
